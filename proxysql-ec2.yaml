AWSTemplateFormatVersion: '2010-09-09'
Description: 'ProxySQL EC2 Instance for Aurora MySQL'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the ProxySQL EC2 instance
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for the ProxySQL EC2 instance
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair name
  
  InstanceType:
    Type: String
    Default: m6in.xlarge
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge
      - m6in.large
      - m6in.xlarge
      - m6in.2xlarge
    Description: EC2 instance type
  
  AllowedCidrIngress:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed to access ProxySQL
  
  AuroraClusterEndpoint:
    Type: String
    Description: Aurora Cluster Endpoint for write operations
  
  AuroraReaderEndpoint:
    Type: String
    Description: Aurora Reader Endpoint for read operations
  
  DBName:
    Type: String
    Default: proxysqlexample
    Description: Database name
  
  DBUsername:
    Type: String
    Default: proxysqluser
    Description: Database username
  
  DBPassword:
    Type: String
    NoEcho: true
    Default: {{YOUR_DB_PASSWORD}}
    NoEcho: true
    Description: Database password

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0a3c3a20c09d6f377
    us-east-2:
      AMI: ami-0629230f2b3ca3eed
    us-west-1:
      AMI: ami-0239cf1e4c359c4af
    us-west-2:
      AMI: ami-0dba2cb6798deb6d8
    eu-west-1:
      AMI: ami-0c1c30571d2dae5c9
    eu-central-1:
      AMI: ami-0f61af304b14f15e3
    ap-northeast-1:
      AMI: ami-0d52744d6551d851e
    ap-southeast-1:
      AMI: ami-0df7a207adb9748c7
    ap-southeast-2:
      AMI: ami-0310483fb2b488153

Resources:
  ProxySQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ProxySQL EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCidrIngress
        - IpProtocol: tcp
          FromPort: 6033
          ToPort: 6033
          CidrIp: !Ref AllowedCidrIngress
        - IpProtocol: tcp
          FromPort: 6032
          ToPort: 6032
          CidrIp: !Ref AllowedCidrIngress
      Tags:
        - Key: Name
          Value: proxysql-security-group
  
  ProxySQLRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ProxySQLPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  
  ProxySQLInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ProxySQLRole
  
  ProxySQLInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !GetAtt ProxySQLSecurityGroup.GroupId
      IamInstanceProfile: !Ref ProxySQLInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system
          dnf update -y
          
          # Install required packages
          dnf install -y wget git jq mysql nc

          # Install ProxySQL
          wget -O /tmp/proxysql-2.5.5-1-centos8.x86_64.rpm https://github.com/sysown/proxysql/releases/download/v2.5.5/proxysql-2.5.5-1-centos8.x86_64.rpm
          dnf install -y /tmp/proxysql-2.5.5-1-centos8.x86_64.rpm
          
          # Start ProxySQL service
          systemctl enable proxysql
          systemctl start proxysql
          
          # Configure ProxySQL
          cat > /tmp/proxysql-config.sql << 'EOF'
          -- MySQL Servers
          DELETE FROM mysql_servers;
          INSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES (10, '${AuroraClusterEndpoint}', 3306, 1000);
          INSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES (20, '${AuroraReaderEndpoint}', 3306, 1000);
          
          -- MySQL Users
          DELETE FROM mysql_users;
          INSERT INTO mysql_users(username, password, active, default_hostgroup, transaction_persistent) VALUES ('${DBUsername}', '${DBPassword}', 1, 10, 1);
          
          -- MySQL Query Rules
          DELETE FROM mysql_query_rules;
          INSERT INTO mysql_query_rules(rule_id, active, match_digest, destination_hostgroup, apply) VALUES (50, 1, '^SELECT.*FOR UPDATE$', 10, 1);
          INSERT INTO mysql_query_rules(rule_id, active, match_digest, destination_hostgroup, apply) VALUES (51, 1, '^SELECT', 20, 1);
          
          -- Save configuration
          SAVE MYSQL SERVERS TO DISK;
          SAVE MYSQL USERS TO DISK;
          SAVE MYSQL QUERY RULES TO DISK;
          
          -- Load configuration
          LOAD MYSQL SERVERS TO RUNTIME;
          LOAD MYSQL USERS TO RUNTIME;
          LOAD MYSQL QUERY RULES TO RUNTIME;
          EOF
          
          # Apply ProxySQL configuration
          mysql -u admin -padmin -h 127.0.0.1 -P 6032 < /tmp/proxysql-config.sql
          
          # Create monitor user in Aurora
          cat > /tmp/create-monitor-user.sql << 'EOF'
          CREATE USER IF NOT EXISTS 'monitor'@'%' IDENTIFIED BY 'monitor';
          GRANT SELECT ON *.* TO 'monitor'@'%';
          EOF
          
          # Wait for Aurora to be available
          echo "Waiting for Aurora to be available..."
          until mysql -u ${DBUsername} -p${DBPassword} -h ${AuroraClusterEndpoint} -e "SELECT 1"; do
            sleep 10
          done
          
          # Create monitor user
          mysql -u ${DBUsername} -p${DBPassword} -h ${AuroraClusterEndpoint} < /tmp/create-monitor-user.sql
          
          # Configure ProxySQL monitor user
          cat > /tmp/monitor-config.sql << 'EOF'
          UPDATE global_variables SET variable_value='monitor' WHERE variable_name='mysql-monitor_username';
          UPDATE global_variables SET variable_value='monitor' WHERE variable_name='mysql-monitor_password';
          LOAD MYSQL VARIABLES TO RUNTIME;
          SAVE MYSQL VARIABLES TO DISK;
          EOF
          
          mysql -u admin -padmin -h 127.0.0.1 -P 6032 < /tmp/monitor-config.sql
          
          # Create test database and table
          cat > /tmp/create-test-db.sql << 'EOF'
          CREATE DATABASE IF NOT EXISTS ${DBName};
          USE ${DBName};
          CREATE TABLE IF NOT EXISTS test_table (
            id INT AUTO_INCREMENT PRIMARY KEY,
            data VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          EOF
          
          mysql -u ${DBUsername} -p${DBPassword} -h ${AuroraClusterEndpoint} < /tmp/create-test-db.sql
          
          # Clean up temporary files
          rm -f /tmp/proxysql-config.sql /tmp/create-monitor-user.sql /tmp/monitor-config.sql /tmp/create-test-db.sql
          
          # Signal completion
          echo "ProxySQL setup completed" > /var/log/proxysql-setup-complete.log
      Tags:
        - Key: Name
          Value: proxysql-instance

Outputs:
  ProxySQLInstanceId:
    Description: ProxySQL EC2 Instance ID
    Value: !Ref ProxySQLInstance
  
  ProxySQLPublicIP:
    Description: ProxySQL Public IP
    Value: !GetAtt ProxySQLInstance.PublicIp
  
  ProxySQLPublicDNS:
    Description: ProxySQL Public DNS
    Value: !GetAtt ProxySQLInstance.PublicDnsName
  
  ProxySQLMySQLEndpoint:
    Description: ProxySQL MySQL Endpoint
    Value: !Sub ${ProxySQLInstance.PublicDnsName}:6033
  
  ProxySQLAdminEndpoint:
    Description: ProxySQL Admin Endpoint
    Value: !Sub ${ProxySQLInstance.PublicDnsName}:6032
  
  SecurityGroupId:
    Description: Security Group ID for ProxySQL Instance
    Value: !GetAtt ProxySQLSecurityGroup.GroupId
